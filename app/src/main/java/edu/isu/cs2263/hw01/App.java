/*
Show Pratoomratana - CS2263 - HW1
V1.2.0
This Java source file was generated by the Gradle 'init' task.
*/
package edu.isu.cs2263.hw01;
//Gradle was not happy compiling without these for some reason.
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import java.io.*;
import java.util.*;

public class App {
    // Output for the help command
    private void help(){
      System.out.println("usage: Calc [OPTIONS]\nEvaluation of simple mathematical expressions\n-b,--batch <file>    batch file containing expressions to evaluate\n-h,--help            print usage message\n-o,--output <file>   output to specifed file");
    }

    //batch and output just copy the next argument, it does not check if it's a file.
    private void batch(String[] args) throws FileNotFoundException, IOException{
      BatchInput batch = new BatchInput();
      batch.readFile(args[1]);
      //System.out.println("Batch value: " + args[1]);
      //eval(args, 2);
    }

    private void output(Options options, String[] args) throws IOException{
      OutputFile out = new OutputFile();
      out.writeFile(options, args[1]);
      //eval(args, 2);
    }

    //If no argument is given enter "live mode".
    public void loopInput(Options options) throws ParseException, FileNotFoundException, IOException{
      ConsoleInput cli = new ConsoleInput();
      cli.loopCli(options, null);
      }

    public void checkCmd(Options options, String[] args) throws ParseException, FileNotFoundException, IOException{
      //Parcser for delimiting the string from the command line.
      CommandLineParser parser = new DefaultParser();
      CommandLine cmd = parser.parse(options, args);

      //No argument, displays unique help message
      if(args.length <= 0){
        loopInput(options);
      }
      else if(cmd.hasOption("h")){
        help();
      }
      //Simply passing the array of strings and using index 1(provided file.)
      else if(cmd.hasOption("b")){
        //Minor error catching
        batch(args);
      }
      else if(cmd.hasOption("o")){
        output(options, args);
      }
      else{
        int total = eval(args, 0);
        printTotal(total);
        //System.out.println("Not a reconized command, use `-h` or `--help` for a list of commands");
      }
    }

    //method to evaluate the expression
    public int eval(String[] expression, int start){ //start represents if you put -b [file] [equation] or simply [equation] to get the right index
      int total = Integer.parseInt(expression[start]);    // Converting string to int
      for (int i = (1 + start); i < expression.length; i++){
        char op = expression[i].charAt(0);          //Converting string to char
        i++;
        int number = Integer.parseInt(expression[i]);
        switch (op){  //Case to evaluate the operater
          case '+': total = (total + number);
            break;
          case '-': total = (total - number);
            break;
          case '*': total = (total * number);
            break;
          case '/': total = (total / number);
            break;
      }
    }
    return total;
  }

  //Simply prints the total
  public void printTotal(int total){
    System.out.println("    ->" + total);
  }

    public static void main(String[] args) throws ParseException, FileNotFoundException, IOException{
      //Main class object
      App app = new App();
      //Options objects for -h, -b and -o
      Options options = new Options();
      options.addOption("h", "help", false, "displays list of commands");
      options.addOption("b", "batch", false, "processes the provided file");
      options.addOption("o", "output", false, "sends the output to the provided file and standard output");
      app.checkCmd(options, args);
    }
}
